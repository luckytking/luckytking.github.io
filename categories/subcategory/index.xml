<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>subcategory on jefffff&#39;s Blog</title>
    <link>https://luckytking.github.io/categories/subcategory/</link>
    <description>Recent content in subcategory on jefffff&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 28 Aug 2022 16:29:07 +0800</lastBuildDate><atom:link href="https://luckytking.github.io/categories/subcategory/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>利用k8s储存卷来部署redis</title>
      <link>https://luckytking.github.io/2022/08/%E5%88%A9%E7%94%A8k8s%E5%82%A8%E5%AD%98%E5%8D%B7%E6%9D%A5%E9%83%A8%E7%BD%B2redis/</link>
      <pubDate>Sun, 28 Aug 2022 16:29:07 +0800</pubDate>
      
      <guid>https://luckytking.github.io/2022/08/%E5%88%A9%E7%94%A8k8s%E5%82%A8%E5%AD%98%E5%8D%B7%E6%9D%A5%E9%83%A8%E7%BD%B2redis/</guid>
      <description>&lt;p&gt;本文主要通过利用k8s如何部署Redis,来学习使用k8s的存储卷Volume。&lt;/p&gt;
&lt;p&gt;Pod本⾝具有⽣命周期，故其内部运⾏的容器及其相关数据⾃⾝均⽆法持久存在。Kubernetes也⽀持类似Docker的存储卷功能，不过，其存储卷Volume是与Pod资源绑定⽽⾮容器。&lt;/p&gt;
&lt;h3 id=&#34;pod-volume&#34;&gt;Pod Volume&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;如何要在一个Pod里声明 Volume&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;⼀是通过.spec.volumes字段定义在Pod之上的存储卷列表，其⽀持使⽤多种不同类型的存储卷且配置参数差别很⼤；&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;span style=&#34;color:#ae81ff&#34;&gt;…&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
&lt;span style=&#34;color:#f92672&#34;&gt;* name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;logdata&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;emptyDir&lt;/span&gt;: {}
&lt;span style=&#34;color:#f92672&#34;&gt;* name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;example&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;gitRepo&lt;/span&gt;:
&lt;span style=&#34;color:#f92672&#34;&gt;repository&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;https://github.com/iKubernetes/k8s_book.git&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;revision&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;master&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;directory&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;另⼀个是通过.spec.containers.volumeMounts字段在容器上定义的存储卷挂载列表，它只能挂载当前Pod资源中定义的具体存储卷，当然，也可以不挂载任何存储卷&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;span style=&#34;color:#ae81ff&#34;&gt;…&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
&lt;span style=&#34;color:#f92672&#34;&gt;* name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;lt;String&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;…&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;volumeMounts&lt;/span&gt;:
* &lt;span style=&#34;color:#ae81ff&#34;&gt;name &amp;lt;string&amp;gt; -required-&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;mountPath &amp;lt;string&amp;gt; -required-&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在之前（&lt;a href=&#34;https://luckytking.github.io/2022/07/k8s%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%B5%84%E6%BA%90%E9%85%8D%E7%BD%AE%E5%92%8C%E5%A3%B0%E6%98%8E%E5%BC%8F%E5%AF%B9%E8%B1%A1%E9%85%8D%E7%BD%AE/&#34;&gt;声明式对象配置&lt;/a&gt;）有介绍过nginx的部署，接着来部署Redis，和Nginx有所不同的是，这里多了一个 ConfigMap 和Volume ,用来配置管理redis和储存。&lt;/p&gt;
&lt;h3 id=&#34;环境&#34;&gt;环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一个k8s 集群（mater* 1，node* 1）&lt;/li&gt;
&lt;li&gt;一个正常连接k8smater的主机的终端&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;创建-config-map&#34;&gt;创建 Config-Map&lt;/h3&gt;
&lt;p&gt;使用 ConfigMap 来配置 Redis ，包含了Redis配置文件里需要的配置项，在创建Pod时会作为配置文件挂载到应用所在的容器中。 my-config-map.yaml 具体如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ConfigMap&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;my-redis-config&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;my-ns&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;data&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;redis.conf&lt;/span&gt;: |&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    requirepass 123456
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    protected-mode no
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    port 6379
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    tcp-backlog 511
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    timeout 0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    tcp-keepalive 300
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    daemonize no
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    supervised no
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    pidfile /var/run/redis_6379.pid
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    loglevel notice
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    logfile &amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    databases 16
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    always-show-logo yes
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    save 900 1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    save 300 10
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    save 60 10000
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    stop-writes-on-bgsave-error yes
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    rdbcompression yes
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    rdbchecksum yes
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    dbfilename dump.rdb
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    dir /data
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    slave-serve-stale-data yes
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    slave-read-only yes
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    repl-diskless-sync no
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    repl-diskless-sync-delay 5
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    repl-disable-tcp-nodelay no
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    slave-priority 100
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    lazyfree-lazy-eviction no
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    lazyfree-lazy-expire no
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    lazyfree-lazy-server-del no
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    slave-lazy-flush no
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    appendonly no
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    appendfilename &amp;#34;appendonly.aof&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    appendfsync everysec
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    no-appendfsync-on-rewrite no
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    auto-aof-rewrite-percentage 100
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    auto-aof-rewrite-min-size 64mb
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    aof-load-truncated yes
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    aof-use-rdb-preamble no
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    lua-time-limit 5000
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    slowlog-log-slower-than 10000
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    slowlog-max-len 128
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    latency-monitor-threshold 0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    notify-keyspace-events Ex
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    hash-max-ziplist-entries 512
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    hash-max-ziplist-value 64
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    list-max-ziplist-size -2
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    list-compress-depth 0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    set-max-intset-entries 512
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    zset-max-ziplist-entries 128
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    zset-max-ziplist-value 64
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    hll-sparse-max-bytes 3000
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    activerehashing yes
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    client-output-buffer-limit normal 0 0 0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    client-output-buffer-limit slave 256mb 64mb 60
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    client-output-buffer-limit pubsub 32mb 8mb 60
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    hz 10
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    aof-rewrite-incremental-fsync yes&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行命令&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# kubectl apply -f my-redis-config.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;创建-deployment&#34;&gt;创建 Deployment&lt;/h3&gt;
&lt;p&gt;创建Deployment 作为调度Pod运行 Redis 的载体。my-redis-deployment.yaml具体如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;apps/v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deployment&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;my-redis&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Unique name for the deployment&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;my-ns&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;my-redis      &lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Labels to be applied to this deployment&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;matchLabels&lt;/span&gt;:     &lt;span style=&#34;color:#75715e&#34;&gt;# This deployment applies to the Pods matching these labels&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;my-redis&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;role&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;master&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;tier&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;backend&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;replicas&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# Run a single pod in the deployment&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;:          &lt;span style=&#34;color:#75715e&#34;&gt;# Template for the pods that will be created by this deployment&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:        &lt;span style=&#34;color:#75715e&#34;&gt;# Labels to be applied to the Pods in this deployment&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;my-redis&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;role&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;master&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;tier&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;backend&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:            &lt;span style=&#34;color:#75715e&#34;&gt;# Spec for the container which will be run inside the Pod.&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;my-redis&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;redis&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;resources&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;requests&lt;/span&gt;:
              &lt;span style=&#34;color:#f92672&#34;&gt;cpu&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100m&lt;/span&gt;
              &lt;span style=&#34;color:#f92672&#34;&gt;memory&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100Mi&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#          command: [&amp;#34;redis-server&amp;#34;,&amp;#34;/etc/redis/redis.conf&amp;#34;]&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;command&lt;/span&gt;:
            - &lt;span style=&#34;color:#ae81ff&#34;&gt;redis-server&lt;/span&gt;
            - &lt;span style=&#34;color:#ae81ff&#34;&gt;/etc/redis/redis.conf&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
            - &lt;span style=&#34;color:#f92672&#34;&gt;containerPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;6379&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;volumeMounts&lt;/span&gt;:
            - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;my-redis-config&lt;/span&gt;
              &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/etc/redis/redis.conf&lt;/span&gt;
              &lt;span style=&#34;color:#f92672&#34;&gt;subPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;redis.conf&lt;/span&gt;
            - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;my-redis-storage&lt;/span&gt;
              &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/data&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;my-redis-storage&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;emptyDir&lt;/span&gt;: {}
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;my-redis-config&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;configMap&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;my-redis-config&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;items&lt;/span&gt;:
              - &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;redis.conf&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;path&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;redis.conf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# kubectl apply -f my-redis-deployment.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;创建-service&#34;&gt;创建 service&lt;/h3&gt;
&lt;p&gt;NodePort 方式向外暴露服务。my-redis-service.yaml 具体如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Service       &lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Type of Kubernetes resource&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;my-redis-svc&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Name of the Kubernetes resource&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;my-ns&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:            &lt;span style=&#34;color:#75715e&#34;&gt;# Labels that will be applied to this resource&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;my-redis&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;role&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;master&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;tier&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;backend&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;NodePort&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;6379&lt;/span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;# Map incoming connections on port 6379 to the target port 6379 of the Pod&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;targetPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;6379&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;nodePort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;30379&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:          &lt;span style=&#34;color:#75715e&#34;&gt;# Map any Pod with the specified labels to this service&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;my-redis&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;role&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;master&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;tier&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;backend&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# kubectl apply -f my-redis-service.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;测试&#34;&gt;测试&lt;/h3&gt;
&lt;p&gt;redis-client 测试NodeId:NodePort&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;redis-cli -h YourNodeIp -p 30379 -a 123456
YourNodeIp:30379&amp;gt; info
# Server
redis_version:7.0.4
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;连接成功。&lt;/p&gt;
&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/zh-cn/docs/tutorials/configuration/configure-redis-using-configmap/&#34;&gt;https://kubernetes.io/zh-cn/docs/tutorials/configuration/configure-redis-using-configmap/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kevinyan815/LearningKubernetes/tree/master/redis-singleton&#34;&gt;https://github.com/kevinyan815/LearningKubernetes/tree/master/redis-singleton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《Kubernetes进阶实战-第2版》  &lt;a href=&#34;https://item.jd.com/13140598.html&#34;&gt;https://item.jd.com/13140598.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>K8s学习笔记  资源配置和声明式对象配置</title>
      <link>https://luckytking.github.io/2022/07/k8s%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%B5%84%E6%BA%90%E9%85%8D%E7%BD%AE%E5%92%8C%E5%A3%B0%E6%98%8E%E5%BC%8F%E5%AF%B9%E8%B1%A1%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 31 Jul 2022 18:04:12 +0800</pubDate>
      
      <guid>https://luckytking.github.io/2022/07/k8s%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%B5%84%E6%BA%90%E9%85%8D%E7%BD%AE%E5%92%8C%E5%A3%B0%E6%98%8E%E5%BC%8F%E5%AF%B9%E8%B1%A1%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;p&gt;本文主要记录Kubernetes的资源管理，包括资源配置，声明式管理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kubernetes提供了RESTful风格的API，它将各类组件均抽象为“资源”，并通过属性赋值完成实例化 。API主要由资源类型和控制器两部分组成，资源通常以json、yaml格式并写入集群的对象，控制器则在集群资源存储完成后自动创建并启动。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;常用的K8s资源有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pod&lt;/li&gt;
&lt;li&gt;Deployment&lt;/li&gt;
&lt;li&gt;Service&lt;/li&gt;
&lt;li&gt;Ingress&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;资源分类&#34;&gt;资源分类&lt;/h3&gt;
&lt;p&gt;依据资源的主要功能作为分类标准，Kubernetes的API对象⼤体可分为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;⼯作负载 （Workload）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ReplicationController&lt;/li&gt;
&lt;li&gt;ReplicaSet&lt;/li&gt;
&lt;li&gt;Deploymen&lt;/li&gt;
&lt;li&gt;StatefulSet&lt;/li&gt;
&lt;li&gt;DaemonSet&lt;/li&gt;
&lt;li&gt;Job&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;发现和负载均衡 （Discovery&amp;amp;LB）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置和存储 （Config&amp;amp;Storage&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;集群 （Cluster）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Namespace&lt;/li&gt;
&lt;li&gt;Node&lt;/li&gt;
&lt;li&gt;Role&lt;/li&gt;
&lt;li&gt;ClusterRole&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;元数据 （Metadata）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它们基本上都是围绕⼀个核⼼⽬的⽽设计：如何更好地运⾏和丰富Pod资源，从⽽为容器化应⽤提供更灵活、更完善的操作与管理组件。&lt;/p&gt;
&lt;h3 id=&#34;资源配置&#34;&gt;资源配置&lt;/h3&gt;
&lt;p&gt;标准格式一般包括一级字段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kind&lt;/li&gt;
&lt;li&gt;apiVersion&lt;/li&gt;
&lt;li&gt;metadata （对象元数据)&lt;/li&gt;
&lt;li&gt;spec（描述所期望的对象应该具有的状态）&lt;/li&gt;
&lt;li&gt;status（字段在对象创建后由系统⾃⾏维护）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以一个nginx的pod.yaml为例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Pod&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;nginx-pod&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;nginx-pod&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;nginx&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;nginx:1.7.9&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
          - &lt;span style=&#34;color:#f92672&#34;&gt;containerPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;metadata:
&lt;ul&gt;
&lt;li&gt;name 当前的对象名称&lt;/li&gt;
&lt;li&gt;labels： 当前对象的标签（键值对）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;spec
&lt;ul&gt;
&lt;li&gt;containers，它的值是⼀个容器对象列表，⽀持嵌套创建⼀到
多个容器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;声明式对象配置&#34;&gt;声明式对象配置&lt;/h3&gt;
&lt;p&gt;提供配置清单文件给k8s系统，并委托系统来跟踪活动对象的状态变动。管理操作的命令通过apply&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$kubectl apply -f &amp;lt;directory&amp;gt;/
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;更新&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl apply -f &amp;lt;directory&amp;gt;/
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;删除&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl apply -f &amp;lt;directory&amp;gt;/ --prune -l your-label 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;建议使用命令式的方法&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl delete -f  &amp;lt;filename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;实战声明式部署nginx&#34;&gt;实战声明式部署nginx&lt;/h3&gt;
&lt;p&gt;定义的deployment文件: nginx_dp.yaml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;apps/v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deployment&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;nginx-deployment&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;nginx-dp&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;replicas&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;matchLabels&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;nginx-pod&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;nginx-pod&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;nginx&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;nginx:1.7.9&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
            - &lt;span style=&#34;color:#f92672&#34;&gt;containerPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;暴露服务，定义service文件nginx_svc.yaml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Service&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;nginx-svc&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;NodePort&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;nginx-pod&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;default&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;protocol&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;TCP&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;targetPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;访问nginx，output
&lt;img src=&#34;https://luckytking.github.io/images/k8s-nginx.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes进阶实战-第2版》  &lt;a href=&#34;https://item.jd.com/13140598.html&#34;&gt;https://item.jd.com/13140598.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;k8s 部署nginx  &lt;a href=&#34;https://github.com/kevinyan815/LearningKubernetes&#34;&gt;https://github.com/kevinyan815/LearningKubernetes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Go Corntab</title>
      <link>https://luckytking.github.io/2022/07/go-corntab/</link>
      <pubDate>Sun, 17 Jul 2022 18:44:07 +0800</pubDate>
      
      <guid>https://luckytking.github.io/2022/07/go-corntab/</guid>
      <description>&lt;p&gt;本文简要介绍golang 使用crontab实现定时任务。&lt;/p&gt;
&lt;h3 id=&#34;linux-crontab&#34;&gt;linux crontab&lt;/h3&gt;
&lt;p&gt;Linux crontab 是用来定期执行程序的命令。当安装完成操作系统之后，默认便会启动此任务调度命令&lt;/p&gt;
&lt;p&gt;命令语法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;crontab [ -u user ] file&lt;/p&gt;
&lt;p&gt;crontab [ -u user ] { -l | -r | -e }&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;*    *    *    *    *
-    -    -    -    -
|    |    |    |    |
|    |    |    |    +----- 星期中星期几 (0 - 6) (星期天 为0)
|    |    |    +---------- 月份 (1 - 12) 
|    |    +--------------- 一个月中的第几天 (1 - 31)
|    +-------------------- 小时 (0 - 23)
+------------------------- 分钟 (0 - 59)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;go-cron&#34;&gt;go cron&lt;/h3&gt;
&lt;p&gt;第三方包“github.com/robfig/cron”来创建 crontab，以实现定时任务&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/robfig/cron&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; (
		&lt;span style=&#34;color:#a6e22e&#34;&gt;cronS&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;cron&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;()
		&lt;span style=&#34;color:#a6e22e&#34;&gt;spec&lt;/span&gt;  = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*/2 * * * * &amp;#34;&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
	)

	&lt;span style=&#34;color:#a6e22e&#34;&gt;entityID&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cronS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;AddFunc&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;spec&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
		&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;count: &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;now:&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Now&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;Unix&lt;/span&gt;())
	})
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;error : %v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
	}
	&lt;span style=&#34;color:#a6e22e&#34;&gt;cronS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Start&lt;/span&gt;()

	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;entityID&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cronS&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Stop&lt;/span&gt;()
	&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; {}
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;go run main.go&lt;/p&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;count:  1 now: 1658053860
count:  2 now: 1658053920
count:  3 now: 1658053980
count:  4 now: 1658054040
count:  5 now: 1658054100

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到每隔1分钟，执行一次Func，count++&lt;/p&gt;
&lt;p&gt;默认情况下标准 cron 规范解析（第一个字段是“分钟”)
可以轻松选择进入秒字段。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cronS&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;cron&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;cron&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WithSeconds&lt;/span&gt;())
&lt;span style=&#34;color:#75715e&#34;&gt;//注意这里多了一个参数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spec&lt;/span&gt;  = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*/2 * * * * * &amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行输出&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;count:  1 now: 1658053640
count:  2 now: 1658053642
count:  3 now: 1658053644
count:  4 now: 1658053646
count:  5 now: 1658053648 

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到每隔两秒执行一次&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
