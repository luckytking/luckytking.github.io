<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on jefffff&#39;s Blog</title>
    <link>https://luckytking.github.io/tags/go/</link>
    <description>Recent content in go on jefffff&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 19 Jun 2022 16:11:18 +0800</lastBuildDate><atom:link href="https://luckytking.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>性能测试平台（locust&#43;boomer）之一</title>
      <link>https://luckytking.github.io/2022/06/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0locust-boomer%E4%B9%8B%E4%B8%80/</link>
      <pubDate>Sun, 19 Jun 2022 16:11:18 +0800</pubDate>
      
      <guid>https://luckytking.github.io/2022/06/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0locust-boomer%E4%B9%8B%E4%B8%80/</guid>
      <description>&lt;p&gt;最近公司打算对后端服务进行压力测试，考虑后端的主要使用golang实现，因此作者准备使用 locust + boomer 实现一个性能测试平台，mark一下实现过程。&lt;/p&gt;
&lt;h3 id=&#34;what-is-locust&#34;&gt;what is locust&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Locust 是一种易于使用、可编写脚本且可扩展的性能测试工具。
您可以在常规 Python 代码中定义用户的行为，而不是停留在 UI 或限制性特定领域的语言中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;what-is-boomer&#34;&gt;what is boomer&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;boomer 完整地实现了 locust 的通讯协议，运行在 slave 模式下，用 goroutine 来执行用户提供的测试函数，然后将测试结果上报给运行在 master 模式下的 locust。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;与 locust 原生的实现相比，解决了两个问题&lt;/strong&gt;。
一是单台施压机上，能充分利用多个 CPU 核心来施压，
二是再也不用提防阻塞 IO 操作导致 gevent 阻塞。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;环境&#34;&gt;环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;服务器
&lt;ul&gt;
&lt;li&gt;Ubuntu （2核4G300G）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;压测机
&lt;ul&gt;
&lt;li&gt;Mac&lt;/li&gt;
&lt;li&gt;Python 版本 Python 3.10.2&lt;/li&gt;
&lt;li&gt;Go 版本 go version go1.17.1 darwin/arm64&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;压测机&#34;&gt;压测机&lt;/h3&gt;
&lt;h4 id=&#34;安装-locust&#34;&gt;安装 locust&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;安装python3.7或者版本大于3.7 （mac 自带python2.X版本）&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;brew install python
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看安装版本&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# python3 -V
Python 3.10.2
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Install Locust&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# pip3 install locust
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;检查安装是否成功&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# locust -V
locust 2.9.1.dev23
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;运行-locust-hello-world&#34;&gt;运行 locust: hello-world&lt;/h4&gt;
&lt;p&gt;要把大象放冰箱一共分三步：第一步打开冰箱&amp;ndash;，不不不，第一步：先试试把小象(hello-world)看看能不能放的进去&lt;/p&gt;
&lt;p&gt;在当前目录 workspace/ 底下创建 locustfile.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; locust &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; HttpUser, task
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HelloWorldUser&lt;/span&gt;(HttpUser):
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@task&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hello_world&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/hello&amp;#34;&lt;/span&gt;)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/world&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;启动-locust&#34;&gt;&lt;strong&gt;启动 locust&lt;/strong&gt;&lt;/h5&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; # locust
 locust 
$: Starting web interface at http://0.0.0.0:8089 (accepting connections from all network interfaces)
$: Starting Locust 2.9.1.dev23

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;访问 http://localhost:8089/ 可以看到
&lt;img src=&#34;https://luckytking.github.io/images/locust-dashboard.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;接着，这边使用golang启动一个http服务 localhost:80（path：/hello &amp;amp; /world）&lt;/p&gt;
&lt;h5 id=&#34;locust---helloworld&#34;&gt;locust - HelloWorld&lt;/h5&gt;
&lt;p&gt;进行一个简单测试 50 个并发用户，加速速度为 1个用户/秒，将其指向响应/hello和的服务器/world
&lt;img src=&#34;https://luckytking.github.io/images/locust-helloworld-test.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击 &amp;ldquo;start swarming&amp;rdquo;
&lt;img src=&#34;https://luckytking.github.io/images/locust-helloworld.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;切换标签页 “Charts”
可以查看：显示每秒请求数 (RPS)
&lt;img src=&#34;https://luckytking.github.io/images/locust-dashboard-rps.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;查看：响应时间（以毫秒为单位） 
&lt;img src=&#34;https://luckytking.github.io/images/locust-dashboard-responsetime.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;查看： 用户数量
&lt;img src=&#34;https://luckytking.github.io/images/locust-dashboard-user.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;小结&#34;&gt;小结&lt;/h4&gt;
&lt;p&gt;本文主要介绍性能测试平台 locust + boomer 的环境搭建，以及运行http 测试用例helloworld，使用locust观测性能指数、图表等。&lt;/p&gt;
&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://locust.io/&#34;&gt;https://locust.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/myzhan/boomer&#34;&gt;https://github.com/myzhan/boomer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
